/**********************************************************************

	--- Qt Architect generated file ---

	File: CDDBSetup.cpp
	Last generated: Mon Apr 13 23:02:42 1998

 *********************************************************************/

/*
 * This file was initialy generated by QTArchitect, but was heavily modified
 * afterwards.
 */

#include "CDDBSetup.h"

#define Inherited CDDBSetupData

#include <kapp.h>
#include <cddb.h>
#include <qvalidator.h> 
#include <limits.h>
#include <stdlib.h>

extern KApplication 	*mykapp;

CDDBSetup::CDDBSetup
(
	QWidget* parent,
	const char* name
)
	:
	Inherited( parent, name )
{


  QString temp;
  QString basedirdefault;


  basedir_edit->setText(temp.data());
  connect(basedir_edit,SIGNAL(textChanged(const char*)),
	  this,SLOT(basedir_changed(const char*)));

  connect(submit_edit,SIGNAL(textChanged(const char*)),
	  this,SLOT(submitaddress_changed(const char*)));

  connect(update_button,SIGNAL(clicked()),
	  this,SLOT(serverlist_update()));

  connect(defaults_button,SIGNAL(clicked()),
	  this,SLOT(set_defaults()));

  connect(help_button,SIGNAL(clicked()),
	  this,SLOT(help()));

  connect(server_listbox,SIGNAL(highlighted(int)),
	  this,SLOT(set_current_server(int)));

  connect(remote_cddb_cb,SIGNAL(toggled(bool)),
	  this,SLOT(enable_remote_cddb(bool)));

  //  submit_edit->setEnabled(false);

  QIntValidator *port_validator=new QIntValidator(this,"HTTP Port Validator");
  port_validator->setRange(0, INT_MAX );  
  proxy_port_ef->setValidator(port_validator); 

  proxy_port_ef->setEnabled(cddb_http_cb->isChecked());
  proxy_host_ef->setEnabled(cddb_http_cb->isChecked());
}

CDDBSetup::~CDDBSetup()
{
}


void CDDBSetup::set_current_server(int i){

  current_server_string = server_listbox->text(i);
  current_server_label->setText(current_server_string.data());
  emit updateCurrentServer();
}

void CDDBSetup::basedir_changed(const char* str){

  basedirstring = str;

}

void CDDBSetup::enable_remote_cddb(bool){

}
void CDDBSetup::submitaddress_changed(const char* str){

  submitaddressstring = str;

}

void CDDBSetup::help(){

  if(mykapp)
    mykapp->invokeHTMLHelp("kscd/kscd.html","");

}

void CDDBSetup::insertData(const QStrList& _serverlist,
			   const QString& _basedir,
			   const QString& _submitaddress,
			   const QString& _current_server,
			   const bool&    remote_enabled,
			   const bool&    http_proxy_enabled,
			   const QString& http_proxy_host,
			   const int&     http_proxy_port)
{

  server_listbox->setAutoUpdate(false);
  server_listbox->clear();
  server_listbox->insertStrList(&_serverlist, -1);
  server_listbox->setAutoUpdate(true);

  basedirstring = _basedir.copy();
  basedir_edit->setText(basedirstring);

  submitaddressstring = _submitaddress.copy();
  submit_edit->setText(submitaddressstring);
  current_server_string = _current_server.copy();
  current_server_label->setText(current_server_string.data());
  remote_cddb_cb->setChecked(remote_enabled);
  cddb_http_cb->setChecked(http_proxy_enabled);
  proxy_host_ef->setText(http_proxy_host);
  char port_str[40];
  sprintf(port_str,"%d",http_proxy_port);
  proxy_port_ef->setText(port_str);
}

void CDDBSetup::set_defaults()
{

  server_listbox->setAutoUpdate(false);
  server_listbox->clear();
  server_listbox->insertItem(DEFAULT_CDDB_SERVER, -1);
  // We should provide at least one entry
  // with HTTP protocol so people behind firewals can get servers list
  server_listbox->insertItem(DEFAULT_CDDBHTTP_SERVER, -1); 
  server_listbox->setAutoUpdate(true);
  server_listbox->repaint();

  basedirstring = mykapp->kde_datadir().copy();
  basedirstring += "/kscd/cddb/";
  basedir_edit->setText(basedirstring);

  submitaddressstring = "xmcd-cddb@amb.org";
  submit_edit->setText(submitaddressstring);
  current_server_string = DEFAULT_CDDB_SERVER;
  current_server_label->setText(current_server_string.data());
  remote_cddb_cb->setChecked(true);
  cddb_http_cb->setChecked(false);
  proxy_host_ef->setText("");
  proxy_port_ef->setText("0");
  emit updateCurrentServer();

}
void CDDBSetup::getData(QStrList& _serverlist,
			QString& _basedir,
			QString& _submitaddress, 
			QString& _current_server,
			bool&    remote_enabled,
			bool&    http_proxy_enabled,
			QString  &http_proxy_host,
			int      &http_proxy_port)
{

  _serverlist.clear();
  for(uint i = 0; i < server_listbox->count();i++){
  _serverlist.append(server_listbox->text(i));
  }
  _basedir = basedirstring.copy();
  _submitaddress = submitaddressstring.copy();

  _current_server     = current_server_string.copy();
  remote_enabled      = remote_cddb_cb->isChecked();
  http_proxy_enabled  = cddb_http_cb->isChecked();
  http_proxy_host     = proxy_host_ef->text();
  http_proxy_port     = atoi(proxy_port_ef->text());
}

void CDDBSetup::getCurrentServer(QString& ser){

  ser = current_server_string.copy();

}
void CDDBSetup::serverlist_update(){

  emit    updateCDDBServers();

}

void CDDBSetup::insertServerList(QStrList& list){

  server_listbox->setAutoUpdate(false);
  server_listbox->clear();
  server_listbox->insertStrList(&list, -1);
  server_listbox->setAutoUpdate(true);
  server_listbox->repaint();
}

void CDDBSetup::http_access_toggled(bool state)
{
    proxy_port_ef->setEnabled(state);
    proxy_host_ef->setEnabled(state);
}

#include "CDDBSetup.moc"
#include "CDDBSetupData.moc"
